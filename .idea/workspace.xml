<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="13bed5d1-c012-4083-9545-7528bbd7735b" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/DockerFile" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/LICENSE" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/bot/bot.go" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/chat/chat.go" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/config/config.go" beforeDir="false" afterPath="$PROJECT_DIR$/config/config.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/docker-compose.yml" beforeDir="false" afterPath="$PROJECT_DIR$/docker-compose.yml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/go.mod" beforeDir="false" afterPath="$PROJECT_DIR$/go.mod" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/go.sum" beforeDir="false" afterPath="$PROJECT_DIR$/go.sum" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/main.go" beforeDir="false" afterPath="$PROJECT_DIR$/main.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/queue/queue.go" beforeDir="false" afterPath="$PROJECT_DIR$/queue/queue.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq.pid" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq.pid" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/DECISION_TAB.LOG" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/DECISION_TAB.LOG" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/LATEST.LOG" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/LATEST.LOG" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_durable_exchange.DCD" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_durable_exchange.DCD" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_runtime_parameters.DCD" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_runtime_parameters.DCD" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_serial" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_serial" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_user.DCD" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_user.DCD" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_user_permission.DCD" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_user_permission.DCD" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_vhost.DCD" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/rabbit_vhost.DCD" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/schema.DAT" beforeDir="false" afterPath="$PROJECT_DIR$/rabbitmq/mnesia/rabbit@rabbitmq/schema.DAT" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Dockerfile" />
        <option value="Go File" />
      </list>
    </option>
  </component>
  <component name="GOROOT" url="file:///usr/lib/go" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$USER_HOME$/go/pkg/mod/github.com/nomic-ai/gpt4all/gpt4all-bindings/golang@v0.0.0-20230727030616-0e866a0e8fc5/binding.cpp" root0="FORCE_HIGHLIGHTING" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: -1
}</component>
  <component name="ProjectId" id="2SkoVdap8fg5RsqFyqXGSzXN2cq" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
    &quot;DefaultGoTemplateProperty&quot;: &quot;Go File&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.automatic.dependencies.download&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
    &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;/home/cstrp/Documents/Gpt_TgBot&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;configurable.group.appearance&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/client" />
      <recent name="$PROJECT_DIR$/client/telegram" />
      <recent name="$PROJECT_DIR$/config" />
    </key>
  </component>
  <component name="RunManager" selected="Docker.docker-compose.yml: Compose">
    <configuration name="go build TeleGoBot" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="Gpt_TgBot" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="TeleGoBot" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/main.go" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="docker-compose.yml" temporary="true">
      <deployment type="docker-compose.yml">
        <settings />
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yml: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="envFilePath" value="" />
          <option name="sourceFilePath" value="docker-compose.yml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yml: Compose" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="envFilePath" value="" />
          <option name="sourceFilePath" value="docker-compose.yml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yml.rabbitmq: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="envFilePath" value="" />
          <option name="services">
            <list>
              <option value="rabbitmq" />
            </list>
          </option>
          <option name="sourceFilePath" value="docker-compose.yml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Docker.docker-compose.yml: Compose" />
        <item itemvalue="Docker.docker-compose.yml.rabbitmq: Compose Deployment" />
        <item itemvalue="Docker.docker-compose.yml: Compose Deployment" />
        <item itemvalue="Go Build.go build TeleGoBot" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName=".env" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="6bf6f1">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/docker-compose.yml" />
                </list>
              </option>
              <option name="id" value="6bf6f1" />
              <option name="initiateTms" value="1689784763926" />
              <option name="request" value="okay i have &#10;version: &quot;3.8&quot;&#10;services:&#10;  rabbitmq:&#10;    image: rabbitmq:3.12-management&#10;    hostname: rabbitmq&#10;    restart: always&#10;    environment:&#10;      - RABBITMQ_DEFAULT_USER=rmuser&#10;      - RABBITMQ_DEFAULT_PASS=rmpassword&#10;      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648&#10;    volumes:&#10;      - ./rabbitmq:/var/lib/rabbitmq&#10;    ports:&#10;      - &quot;5672:5672&quot;&#10;      - &quot;15672:15672&quot;&#10;&#10;тебе нужно дополнить его и контеризировать мое го приложение" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! To dockerize your GoLang app and add it to the existing `docker-compose.yml` file, you can follow these steps:&#10;&#10;1. Create a Dockerfile in the root directory of your GoLang app. Here's an example of a Dockerfile:&#10;&#10;```Dockerfile&#10;# Start from a base GoLang image&#10;FROM golang:latest&#10;&#10;# Set the working directory inside the container&#10;WORKDIR /app&#10;&#10;# Copy the GoLang app source code to the container&#10;COPY . .&#10;&#10;# Build the GoLang app&#10;RUN go build -o main .&#10;&#10;# Expose the port that the app listens on&#10;EXPOSE 8080&#10;&#10;# Set the command to run the app when the container starts&#10;CMD [&quot;./main&quot;]&#10;```&#10;&#10;2. Update your `docker-compose.yml` file to include your GoLang app service. Here's an example of how it can be added:&#10;&#10;```yml&#10;version: &quot;3.8&quot;&#10;services:&#10;  rabbitmq:&#10;    image: rabbitmq:3.12-management&#10;    hostname: rabbitmq&#10;    restart: always&#10;    environment:&#10;      - RABBITMQ_DEFAULT_USER=rmuser&#10;      - RABBITMQ_DEFAULT_PASS=rmpassword&#10;      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648&#10;    volumes:&#10;      - ./rabbitmq:/var/lib/rabbitmq&#10;    ports:&#10;      - &quot;5672:5672&quot;&#10;      - &quot;15672:15672&quot;&#10;&#10;  myapp:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;```&#10;&#10;3. Save the changes to your `docker-compose.yml` file.&#10;&#10;4. Open a terminal and navigate to the directory where your `docker-compose.yml` file is located.&#10;&#10;5. Run the following command to build and start the containers:&#10;&#10;```&#10;docker-compose up -d&#10;```&#10;&#10;This will build the Docker image for your GoLang app and start both the RabbitMQ and your GoLang app containers.&#10;&#10;Now, your GoLang app should be running inside a Docker container and accessible at `http://localhost:8080`. RabbitMQ will also be running on the specified ports.&#10;&#10;Let me know if you need any further assistance!" />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1689784771876" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/docker-compose.yml" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="6f5992">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/docker-compose.yml" />
                </list>
              </option>
              <option name="id" value="6f5992" />
              <option name="initiateTms" value="1689784931567" />
              <option name="request" value="16:41:55 dial tcp 127.0.0.1:5672: connect: connection refused" />
              <option name="response" value="" />
              <option name="responseDescription" value="The error message &quot;dial tcp 127.0.0.1:5672: connect: connection refused&quot; indicates that there is an issue connecting to the RabbitMQ service running on port 5672.&#10;&#10;Here are a few things you can check to troubleshoot this issue:&#10;&#10;1. Make sure that the RabbitMQ service is running. You can check the status of the service by running the following command:&#10;&#10;   ```&#10;   docker-compose ps&#10;   ```&#10;&#10;   This will show you the status of all the services defined in your `docker-compose.yml` file. Make sure that the RabbitMQ service is listed and has a status of &quot;Up&quot;.&#10;&#10;2. Check if there are any conflicting services running on port 5672. It's possible that another service on your machine is already using that port, which is causing the connection issue. You can use the following command to check for any processes listening on port 5672:&#10;&#10;   ```&#10;   sudo lsof -i :5672&#10;   ```&#10;&#10;   If there are any processes listed, you may need to stop or reconfigure them to free up the port.&#10;&#10;3. Verify that the RabbitMQ service is configured correctly in your `docker-compose.yml` file. Double-check the `ports` section to ensure that the port mapping is correct. It should be in the format `&lt;host-port&gt;:&lt;container-port&gt;`. In this case, it should be `&quot;5672:5672&quot;`.&#10;&#10;4. If you have made any changes to the `docker-compose.yml` file or the Dockerfile for your GoLang app, make sure to rebuild the containers using the following command:&#10;&#10;   ```&#10;   docker-compose up -d --build&#10;   ```&#10;&#10;   This will ensure that any changes are applied to the containers.&#10;&#10;If none of these steps resolve the issue, please provide me with any additional error messages or logs that you may have, and I'll be happy to assist you further." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1689784939190" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/docker-compose.yml" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="92e75c">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/queue/queue.go" />
                </list>
              </option>
              <option name="id" value="92e75c" />
              <option name="initiateTms" value="1689784661813" />
              <option name="request" value="dockerize my golang app" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! I can help you with that. To dockerize your GoLang app, you'll need to create a Dockerfile in the root directory of your project. Here's an example of a Dockerfile for a GoLang app:&#10;&#10;```Dockerfile&#10;# Start from a base GoLang image&#10;FROM golang:latest&#10;&#10;# Set the working directory inside the container&#10;WORKDIR /app&#10;&#10;# Copy the GoLang app source code to the container&#10;COPY . .&#10;&#10;# Build the GoLang app&#10;RUN go build -o main .&#10;&#10;# Expose the port that the app listens on&#10;EXPOSE 8080&#10;&#10;# Set the command to run the app when the container starts&#10;CMD [&quot;./main&quot;]&#10;```&#10;&#10;To build the Docker image, open a terminal and navigate to the root directory of your project where the Dockerfile is located. Then run the following command:&#10;&#10;```&#10;docker build -t your-image-name .&#10;```&#10;&#10;Replace `your-image-name` with the desired name for your Docker image.&#10;&#10;Once the image is built, you can run a container from it using the following command:&#10;&#10;```&#10;docker run -p 8080:8080 your-image-name&#10;```&#10;&#10;Replace `your-image-name` with the name of the Docker image you built.&#10;&#10;Your GoLang app should now be running inside a Docker container. You can access it by navigating to `http://localhost:8080` in your web browser.&#10;&#10;Let me know if you need any further assistance!" />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1689784670144" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/queue/queue.go" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="b18818">
          <value>
            <ChatHistoryModel>
              <option name="id" value="b18818" />
              <option name="initiateTms" value="1689784142162" />
              <option name="request" value="hi" />
              <option name="response" value="" />
              <option name="responseDescription" value="Hello! How can I assist you today?" />
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="greeting">
          <value>
            <ChatHistoryModel>
              <option name="id" value="greeting" />
              <option name="initiateTms" value="1689783977494" />
              <option name="request" value="" />
              <option name="response" value="" />
              <option name="responseDescription" value="&#10;Hello, I am Machinet AI - context aware chat, which can help you with your daily programming routine. How can I help?" />
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>